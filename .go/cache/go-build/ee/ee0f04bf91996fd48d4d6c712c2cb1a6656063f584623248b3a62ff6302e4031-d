// Code generated by cmd/cgo; DO NOT EDIT.

//line /src/vendor/github.com/mattn/go-sqlite3/sqlite3_type.go:1:1
// Copyright (C) 2019 Yasuhiro Matsumoto <mattn.jp@gmail.com>.
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file.

package sqlite3

/*
#ifndef USE_LIBSQLITE3
#include <sqlite3-binding.h>
#else
#include <sqlite3.h>
#endif
*/
import _ "unsafe"
import (
	"reflect"
	"time"
)

// ColumnTypeDatabaseTypeName implement RowsColumnTypeDatabaseTypeName.
func (rc *SQLiteRows) ColumnTypeDatabaseTypeName(i int) string {
	return ( /*line :23:9*/_Cfunc_GoString /*line :23:18*/)(func() *_Ctype_char{ _cgo0 := /*line :23:46*/rc.s.s; var _cgo1 _Ctype_int = _Ctype_int(i); _cgoCheckPointer(_cgo0, nil); return _Cfunc_sqlite3_column_decltype(_cgo0, _cgo1); }())
}

/*
func (rc *SQLiteRows) ColumnTypeLength(index int) (length int64, ok bool) {
	return 0, false
}

func (rc *SQLiteRows) ColumnTypePrecisionScale(index int) (precision, scale int64, ok bool) {
	return 0, 0, false
}

// ColumnTypeNullable implement RowsColumnTypeNullable.
func (rc *SQLiteRows) ColumnTypeNullable(i int) (nullable, ok bool) {
	return false, false
}
*/

// ColumnTypeScanType implement RowsColumnTypeScanType.
func (rc *SQLiteRows) ColumnTypeScanType(i int) reflect.Type {
	switch func() _Ctype_int{ _cgo0 := /*line :43:31*/rc.s.s; var _cgo1 _Ctype_int = _Ctype_int(i); _cgoCheckPointer(_cgo0, nil); return _Cfunc_sqlite3_column_type(_cgo0, _cgo1); }() {
	case ( /*line :44:7*/_Ciconst_SQLITE_INTEGER /*line :44:22*/):
		switch ( /*line :45:10*/_Cfunc_GoString /*line :45:19*/)(func() *_Ctype_char{ _cgo0 := /*line :45:47*/rc.s.s; var _cgo1 _Ctype_int = _Ctype_int(i); _cgoCheckPointer(_cgo0, nil); return _Cfunc_sqlite3_column_decltype(_cgo0, _cgo1); }()) {
		case "timestamp", "datetime", "date":
			return reflect.TypeOf(time.Time{})
		case "boolean":
			return reflect.TypeOf(false)
		}
		return reflect.TypeOf(int64(0))
	case ( /*line :52:7*/_Ciconst_SQLITE_FLOAT /*line :52:20*/):
		return reflect.TypeOf(float64(0))
	case ( /*line :54:7*/_Ciconst_SQLITE_BLOB /*line :54:19*/):
		return reflect.SliceOf(reflect.TypeOf(byte(0)))
	case ( /*line :56:7*/_Ciconst_SQLITE_NULL /*line :56:19*/):
		return reflect.TypeOf(nil)
	case ( /*line :58:7*/_Ciconst_SQLITE_TEXT /*line :58:19*/):
		return reflect.TypeOf("")
	}
	return reflect.SliceOf(reflect.TypeOf(byte(0)))
}
